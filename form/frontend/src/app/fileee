import React, { useState, useEffect } from 'react';
import { Form, Input, Button, DatePicker, Select, Radio, Card, Col,Table, message } from 'antd';
import { Link } from 'react-router-dom';

const { Option } = Select;

const StudentRegistrationForm = () => {
  const [form] = Form.useForm();
  const [data, setData] = useState<any[]>([]);

  const onFinish = (values: any) => {
    const formattedData = {
      ...values,
      dateOfBirth: values.dateOfBirth.format('YYYY-MM-DD'),
      id: data.length + 1,
    };

    setData([...data, formattedData]);
    form.resetFields();
    console.log('Form fields have been reset');
  };

  useEffect(() => {
    console.log('Updated registration data:', data);
  }, [data]);

  const handleUpload = async () => {
    try {
      const response = await fetch('http://localhost:5000/User/addUser', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        message.success('Data uploaded successfully');
        setData([]);
        console.log('Grid has been cleared');
      } else {
        message.error('Failed to upload data');
        console.error('Upload error:', response.statusText);
      }
    } catch (error) {
      message.error('Failed to upload data');
      console.error('Upload error:', error);
    }
  };

  return (
    <div className="page-container">
      <Card
        title={<span style={{ color: 'white' }}>Student Registration Form</span>}
        extra={<Link to="/view">
          <span style={{ color: 'white' }}>
            <Button type={'primary'}>View</Button>{' '}
          </span>
        </Link>}
        headStyle={{ backgroundColor: '#69c0ff', border: 0 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={onFinish}
          initialValues={{ gender: null }}
        >
            <Col span={8}>
              <Form.Item
                name="firstName"
                label="First Name"
                rules={[{ required: true, message: 'Please input your first name!' }]}
              >
                <Input placeholder="Enter your first name" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="lastName"
                label="Last Name"
                rules={[{ required: true, message: 'Please input your last name!' }]}
              >
                <Input placeholder="Enter your last name" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="dateOfBirth"
                label="Date of Birth"
                rules={[{ required: true, message: 'Please select your date of birth!' }]}
              >
                <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="gender"
                label="Gender"
                rules={[{ required: true, message: 'Please select your gender!' }]}
              >
                <Radio.Group>
                  <Radio value="male">Male</Radio>
                  <Radio value="female">Female</Radio>
                  <Radio value="other">Other</Radio>
                </Radio.Group>
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="email"
                label="Email"
                rules={[
                  { type: 'email', message: 'The input is not valid E-mail!' },
                  { required: true, message: 'Please input your E-mail!' },
                ]}
              >
                <Input placeholder="Enter your email" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="phoneNumber"
                label="Phone Number"
                rules={[{ required: true, message: 'Please input your phone number!' }]}
              >
                <Input placeholder="Enter your phone number" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="course"
                label="Course"
                rules={[{ required: true, message: 'Please select your course!' }]}
              >
                <Select placeholder="Select a course">
                  <Option value="science">Science</Option>
                  <Option value="commerce">Commerce</Option>
                  <Option value="arts">Arts</Option>
                  <Option value="maths">Maths</Option>
                </Select>
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item>
                <Button type="primary" htmlType="submit">
                  Register
                </Button>
              </Form.Item>
            </Col>
        </Form>
      </Card>
      <div>
        <Card
          extra={
            <Button type="primary" onClick={handleUpload}>
              Upload
            </Button>
          }
        >
          <Table
            className="custom-table-wrapper"
            dataSource={data}
            rowKey="id"
            pagination={{ pageSize: 5 }}
          >
            <Table.Column title="First Name" dataIndex="firstName" key="firstName" />
            <Table.Column title="Last Name" dataIndex="lastName" key="lastName" />
            <Table.Column title="Date of Birth" dataIndex="dateOfBirth" key="dateOfBirth" />
            <Table.Column title="Gender" dataIndex="gender" key="gender" />
            <Table.Column title="Email" dataIndex="email" key="email" />
            <Table.Column title="Phone Number" dataIndex="phoneNumber" key="phoneNumber" />
            <Table.Column title="Course" dataIndex="course" key="course" />
          </Table>
        </Card>
      </div>
    </div>
  );
};

export default StudentRegistrationForm;












import React, { useState, useEffect } from 'react';
import { Form, Input, Button, DatePicker, Select, Radio, Card, Col, Row, Table, message } from 'antd';
import { Link, useNavigate } from 'react-router-dom';

const { Option } = Select;

const StudentRegistrationForm = () => {
  const [form] = Form.useForm();
  const [data, setData] = useState<any[]>([]);
  const navigate = useNavigate();

  const handleUpload = async (formattedData: any) => {
    try {
      const response = await fetch('http://localhost:5000/User/addUser', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formattedData),
      });

      if (response.ok) {
        const result = await response.json();
        setData([...data, formattedData]);
        form.resetFields();
        message.success('Registration successful!');
      } else {
        message.error('Failed to register user.');
      }
    } catch (error) {
      console.error('Error:', error);
      message.error('Failed to register user.');
    }
  };

  const onFinish = (values: any) => {
    const formattedData = {
      ...values,
      dateOfBirth: values.dateOfBirth.format('YYYY-MM-DD'),
      id: data.length + 1,
    };

    handleUpload(formattedData);
  };

  useEffect(() => {
    console.log('Updated registration data:', data);
  }, [data]);

  return (
    <div className="page-container">
      <Card
        title={<span style={{ color: 'white' }}>Student Registration Form</span>}
        extra={
          <Link to="/view">
            <span style={{ color: 'white' }}>
              <Button type="primary">View</Button>
            </span>
          </Link>
        }
        headStyle={{ backgroundColor: '#69c0ff', border: 0 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={onFinish}
          initialValues={{
            gender: null,
          }}
        >
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="firstName"
                label="First Name"
                rules={[{ required: true, message: 'Please input your first name!' }]}
              >
                <Input placeholder="Enter your first name" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="lastName"
                label="Last Name"
                rules={[{ required: true, message: 'Please input your last name!' }]}
              >
                <Input placeholder="Enter your last name" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="dateOfBirth"
                label="Date of Birth"
                rules={[{ required: true, message: 'Please select your date of birth!' }]}
              >
                <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="gender"
                label="Gender"
                rules={[{ required: true, message: 'Please select your gender!' }]}
              >
                <Radio.Group>
                  <Radio value="male">Male</Radio>
                  <Radio value="female">Female</Radio>
                  <Radio value="other">Other</Radio>
                </Radio.Group>
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="email"
                label="Email"
                rules={[
                  { type: 'email', message: 'The input is not valid E-mail!' },
                  { required: true, message: 'Please input your E-mail!' },
                ]}
              >
                <Input placeholder="Enter your email" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="phoneNumber"
                label="Phone Number"
                rules={[{ required: true, message: 'Please input your phone number!' }]}
              >
                <Input placeholder="Enter your phone number" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="course"
                label="Course"
                rules={[{ required: true, message: 'Please select your course!' }]}
              >
                <Select placeholder="Select a course">
                  <Option value="science">Science</Option>
                  <Option value="commerce">Commerce</Option>
                  <Option value="arts">Arts</Option>
                  <Option value="maths">Maths</Option>
                </Select>
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item>
                <Button type="primary" htmlType="submit">
                  Register
                </Button>
              </Form.Item>
            </Col>
          </Row>
        </Form>
      </Card>

      <Card>
        <Table
          className="custom-table-wrapper"
          dataSource={data}
          rowKey="id"
          pagination={{ pageSize: 5 }}
        >
          <Table.Column title="First Name" dataIndex="firstName" key="firstName" />
          <Table.Column title="Last Name" dataIndex="lastName" key="lastName" />
          <Table.Column title="Date of Birth" dataIndex="dateOfBirth" key="dateOfBirth" />
          <Table.Column title="Gender" dataIndex="gender" key="gender" />
          <Table.Column title="Email" dataIndex="email" key="email" />
          <Table.Column title="Phone Number" dataIndex="phoneNumber" key="phoneNumber" />
          <Table.Column title="Course" dataIndex="course" key="course" />
        </Table>
      </Card>
    </div>
  );
};

export default StudentRegistrationForm;







import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { Table, Card, Button, message } from 'antd';
import moment from 'moment';

const { Column } = Table;

const View = () => {
  const [data, setData] = useState<any[]>([]);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch('http://localhost:5000/User/getUsers');
      if (response.ok) {
        const result = await response.json();
        setData(result);
      } else {
        message.error('Failed to fetch data');
      }
    } catch (error) {
      message.error('Failed to fetch data');
      console.error('Fetch error:', error);
    }
  };

  return (
    <div className="page-container">
      <Card
        title={<span style={{ color: 'white' }}>Registered Students List</span>}
        headStyle={{ backgroundColor: '#69c0ff', border: 0 }}
      >
        <Table className="custom-table-wrapper" dataSource={data} rowKey="id">
        <Column title="Id" dataIndex="id" key="id" />
          <Column title="First Name" dataIndex="firstName" key="firstName" />
          <Column title="Last Name" dataIndex="lastName" key="lastName" />
          <Column
            title="Date of Birth"
            dataIndex="dateOfBirth"
            key="dateOfBirth"
            render={(dateOfBirth: string) => (
              <span>{moment(dateOfBirth).format('YYYY-MM-DD')}</span>
            )}
          />
          <Column title="Gender" dataIndex="gender" key="gender" />
          <Column title="Email" dataIndex="email" key="email" />
          <Column title="Phone Number" dataIndex="phoneNumber" key="phoneNumber" />
          <Column title="Course" dataIndex="course" key="course" />
          
        </Table>
      </Card>
      <Link to="/">
        <Button type="primary">Back</Button>
      </Link>
    </div>
  );
};

export default View;


full code all edit 


import React, { useState, useEffect } from 'react';
import { Form, Input, Button, DatePicker, Select, Radio, Card, Col, Table, message } from 'antd';
import { Link } from 'react-router-dom';

const { Option } = Select;

const StudentRegistrationForm = () => {
  const [form] = Form.useForm();
  const [data, setData] = useState<any[]>([]);

  const onFinish = (values: any) => {
    const formattedData = {
      ...values,
      dateOfBirth: values.dateOfBirth.format('YYYY-MM-DD'),
      id: data.length + 1,
    };

    setData([...data, formattedData]);
    form.resetFields();
  };

  const handleUpload = async () => {
    try {
      const uploadPromises = data.map(async (entry) => {
        const response = await fetch('http://localhost:5000/User/addUser', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(entry),
        });

        if (!response.ok) {
          throw new Error(`Failed to upload entry with id ${entry.id}: ${response.statusText}`);
        }
      });

      await Promise.all(uploadPromises);

      message.success('Data uploaded successfully');
      setData([]);
    } catch (error) {
      message.error('Failed to upload data');
      console.error('Upload error:', error);
    }
  };

  useEffect(() => {
    console.log('Updated registration data:', data);
  }, [data]);

  return (
    <div className="page-container">
      <Card
        title={<span style={{ color: 'white' }}>Student Registration Form</span>}
        extra={
          <Link to="/view">
            <span style={{ color: 'white' }}>
              <Button type="primary">View</Button>
            </span>
          </Link>
        }
        headStyle={{ backgroundColor: '#69c0ff', border: 0 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={onFinish}
          initialValues={{
            gender: null,
          }}
        >
            <Col span={8}>
              <Form.Item
                name="firstName"
                label="First Name"
                rules={[{ required: true, message: 'Please input your first name!' }]}
              >
                <Input placeholder="Enter your first name" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="lastName"
                label="Last Name"
                rules={[{ required: true, message: 'Please input your last name!' }]}
              >
                <Input placeholder="Enter your last name" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="dateOfBirth"
                label="Date of Birth"
                rules={[{ required: true, message: 'Please select your date of birth!' }]}
              >
                <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="gender"
                label="Gender"
                rules={[{ required: true, message: 'Please select your gender!' }]}
              >
                <Radio.Group>
                  <Radio value="male">Male</Radio>
                  <Radio value="female">Female</Radio>
                  <Radio value="other">Other</Radio>
                </Radio.Group>
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="email"
                label="Email"
                rules={[
                  { type: 'email', message: 'The input is not valid E-mail!' },
                  { required: true, message: 'Please input your E-mail!' },
                ]}
              >
                <Input placeholder="Enter your email" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="phoneNumber"
                label="Phone Number"
                rules={[{ required: true, message: 'Please input your phone number!' }]}
              >
                <Input placeholder="Enter your phone number" />
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item
                name="course"
                label="Course"
                rules={[{ required: true, message: 'Please select your course!' }]}
              >
                <Select placeholder="Select a course">
                  <Option value="science">Science</Option>
                  <Option value="commerce">Commerce</Option>
                  <Option value="arts">Arts</Option>
                  <Option value="maths">Maths</Option>
                </Select>
              </Form.Item>
            </Col>

            <Col span={8}>
              <Form.Item>
                <Button type="primary" htmlType="submit">
                  Register
                </Button>
              </Form.Item>
            </Col>
        </Form>
      </Card>

      <Card>
        <Table
          className="custom-table-wrapper"
          dataSource={data}
          rowKey="id"
          pagination={{ pageSize: 5 }}
        >
          <Table.Column title="First Name" dataIndex="firstName" key="firstName" />
          <Table.Column title="Last Name" dataIndex="lastName" key="lastName" />
          <Table.Column title="Date of Birth" dataIndex="dateOfBirth" key="dateOfBirth" />
          <Table.Column title="Gender" dataIndex="gender" key="gender" />
          <Table.Column title="Email" dataIndex="email" key="email" />
          <Table.Column title="Phone Number" dataIndex="phoneNumber" key="phoneNumber" />
          <Table.Column title="Course" dataIndex="course" key="course" />
        </Table>
        <Button type="primary" onClick={handleUpload} style={{ marginTop: '16px' }}>
          Upload
        </Button>
      </Card>
    </div>
  );
};

export default StudentRegistrationForm;



import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { Table, Card, Button, message, Drawer, Form, Input, DatePicker, Select } from 'antd';
import { EditOutlined, DeleteOutlined } from '@ant-design/icons';
import moment from 'moment';

const { Column } = Table;
const { Option } = Select;

const View = () => {
  const [data, setData] = useState<any[]>([]);
  const [drawerVisible, setDrawerVisible] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);

  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [dateOfBirth, setDateOfBirth] = useState<moment.Moment | null>(null);
  const [gender, setGender] = useState('');
  const [email, setEmail] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [course, setCourse] = useState('');

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch('http://localhost:5000/User/getUsers');
      if (response.ok) {
        const result = await response.json();
        setData(result);
      } else {
        message.error('Failed to fetch data');
      }
    } catch (error) {
      message.error('Failed to fetch data');
      console.error('Fetch error:', error);
    }
  };

  const handleEdit = (record: any) => {
    setCurrentUser(record);
    setFirstName(record.firstName);
    setLastName(record.lastName);
    setDateOfBirth(moment(record.dateOfBirth));
    setGender(record.gender);
    setEmail(record.email);
    setPhoneNumber(record.phoneNumber);
    setCourse(record.course);
    setDrawerVisible(true);
  };

  const handleDelete = (id: string) => {
    console.log(`Delete user with id: ${id}`);
  };

  const handleCloseDrawer = () => {
    setDrawerVisible(false);
  };

  const handleSave = async () => {
    const updatedUser = {
      ...currentUser,
      firstName,
      lastName,
      dateOfBirth: dateOfBirth ? dateOfBirth.format('YYYY-MM-DD') : '',
      gender,
      email,
      phoneNumber,
      course
    };

    try {
      const response = await fetch(`http://localhost:5000/User/updateUser/${currentUser.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedUser)
      });

      if (response.ok) {
        message.success('User updated successfully');
        fetchData();
        setDrawerVisible(false);
      } else {
        message.error('Failed to update user');
      }
    } catch (error) {
      message.error('Failed to update user');
      console.error('Update error:', error);
    }
  };
  const handlePhoneNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = e.target;
    const numericValue = value.replace(/\D/g, '');
    if (numericValue.length <= 10) {
      setPhoneNumber(numericValue);
    }
  };

  const handleFirstNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = e.target;
    const alphabeticValue = value.replace(/[^a-zA-Z]/g, '');
    setFirstName(alphabeticValue);
  };

  const handleLastNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = e.target;
    const alphabeticValue = value.replace(/[^a-zA-Z]/g, '');
    setLastName(alphabeticValue);
  };

  return (
    <div className="page-container">
      <Card
        title={<span style={{ color: 'white' }}>Registered Students List</span>}
        headStyle={{ backgroundColor: '#69c0ff', border: 0 }}
      >
        <Table className="custom-table-wrapper" dataSource={data} rowKey="id">
          <Column title="Id" dataIndex="id" key="id" />
          <Column title="First Name" dataIndex="firstName" key="firstName" />
          <Column title="Last Name" dataIndex="lastName" key="lastName" />
          <Column
            title="Date of Birth"
            dataIndex="dateOfBirth"
            key="dateOfBirth"
            render={(dateOfBirth: string) => (
              <span>{moment(dateOfBirth).format('YYYY-MM-DD')}</span>
            )}
          />
          <Column title="Gender" dataIndex="gender" key="gender" />
          <Column title="Email" dataIndex="email" key="email" />
          <Column title="Phone Number" dataIndex="phoneNumber" key="phoneNumber" />
          <Column title="Course" dataIndex="course" key="course" />
          <Column
            title="Actions"
            key="actions"
            render={(text, record:any) => (
              <span>
                <Button
                  type="link"
                  icon={<EditOutlined />}
                  onClick={() => handleEdit(record)}
                />
                <Button
                  type="link"
                  icon={<DeleteOutlined />}
                  // onClick={() => handleDelete(record.id)}
                />
              </span>
            )}
          />
        </Table>
      </Card>
      <Link to="/">
        <Button type="primary">Back</Button>
      </Link>

      <Drawer
        title="Edit User"
        width={400}
        onClose={handleCloseDrawer}
        visible={drawerVisible}
        destroyOnClose={true}
      >
        {currentUser && (
          <Form layout="vertical">
            <Form.Item label="First Name">
              <Input value={firstName} onChange={handleFirstNameChange} />
            </Form.Item>
            <Form.Item label="Last Name">
              <Input value={lastName} onChange={handleLastNameChange} />
            </Form.Item>
            <Form.Item label="Date of Birth">
              <DatePicker
                value={dateOfBirth}
                onChange={date => setDateOfBirth(date)}
                format="YYYY-MM-DD"
              />
            </Form.Item>
            <Form.Item label="Gender">
              <Select value={gender} onChange={value => setGender(value)}>
                <Option value="male">Male</Option>
                <Option value="female">Female</Option>
                <Option value="other">Other</Option>
              </Select>
            </Form.Item>
            <Form.Item label="Email">
              <Input value={email} onChange={e => setEmail(e.target.value)} />
            </Form.Item>
            <Form.Item label="Phone Number">
              <Input value={phoneNumber} onChange={handlePhoneNumberChange} />
            </Form.Item>
            <Form.Item label="Course">
              <Select value={course} onChange={value => setCourse(value)}>
                <Option value="commerce">Commerce</Option>
                <Option value="arts">Arts</Option>
                <Option value="maths">Maths</Option>
                <Option value="science">Science</Option>
              </Select>
            </Form.Item>
            <Form.Item>
              <Button type="primary" onClick={handleSave}>Save</Button>
            </Form.Item>
          </Form>
        )}
      </Drawer>
    </div>
  );
};

export default View;


